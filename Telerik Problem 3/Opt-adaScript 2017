// 80/100

function solve(args) {
	var enumName;
	var obj = {};
	var finalArr = [];
	var holdArr = [];
	var kliombaArr = [];
	var finalArrLen;
	var kliombaArrLen;
	var val;
	var p = 0
	var k = 0;
	var j = 0;
	var i = 0;
	args.forEach(function(line){
		line = line.trim();
		if(line === "</>"){
			if(enumName[0] !== "@"){
				finalArrLen = finalArr.length;
				for(k = k; k < finalArrLen; k += 1){
					if(finalArr[k].value !== null && finalArr[k].enName === enumName){
						holdArr.push(finalArr[k].value);
					} 
				}

				holdArr = holdArr.sort();
				for(p = p; p < finalArrLen; p += 1){
					if(finalArr[p].value === null){
						while(1){
							if(i < holdArr[j] || i > holdArr[j] || holdArr.length === 0){
								finalArr[p].value = i;
								i += 1;
								break;
							} else if (i === holdArr[j]){
								i += 1;
								j += 1;
								if(j === holdArr.length){
									j -= 1;
								}
							}
						}
					}
				}
			}
			i = 0;
			j = 0;
			holdArr = [];
			// out
		} else if (line[0] === "<"){
			if(line[1] === "@"){
				// shared enums
				enumName = line.substring(1, line.length - 1);
			} else {
				enumName = line.substring(1, line.length - 1);
			}
		} else {
			var spl = line.split(/[=;]/g);
			spl = spl.filter(function(word){
				return !!word;
			});
			var name = spl[0].trim();
			if(!(obj.name === name)){
				obj.name = name;
				if(typeof(spl[1]) === "string"){
					val = +spl[1];
					obj.value = val;
				} else {
					obj.value = null;
				}
			}
			if(enumName[0] === "@"){
				obj.enName = enumName.substring(1, enumName.length);
				kliombaArr.push(obj);
			} else {
				obj.enName = enumName;
				finalArr.push(obj);
			}

			obj = {};
		}

	});
	kliombaArrLen = kliombaArr.length;
	for(k = 0; k < kliombaArrLen; k += 1){
		if(kliombaArr[k].value !== null){
			holdArr.push(kliombaArr[k].value);
		} 
	}

	holdArr = holdArr.sort();
	for(p = 0; p < kliombaArrLen; p += 1){
		if(kliombaArr[p].value === null){
			while(1){
				if(i < holdArr[j] || i > holdArr[j] || holdArr.length === 0){
					kliombaArr[p].value = i;
					i += 1;
					break;
				} else if (i === holdArr[j]){
					i += 1;
					j += 1;
					if(j === holdArr.length){
						j -= 1;
					}
				}
			}
		}
	}
	finalArr = finalArr.concat(kliombaArr);
	finalArr = finalArr.sort(function(a, b){
		if ( a.name < b.name )
        	return -1;
    	if ( a.name > b.name )
        	return 1;
    	return 0;
	});
	finalArrLen = finalArr.length;
	for(k = 0; k < finalArrLen; k += 1){
		console.log(finalArr[k].name + " = " + finalArr[k].value + " :: " + finalArr[k].enName + ";");
	}
}

solve([
    '<@Languages>',
    '   CSharp;',
    '   JavaScript;',
    '   Haskell = 42;',
    '   Rust = 4;',
    '   CPP;',
    '</>',
    '<Result>',
    '   Failed;',
    '   Passed;',
    '   Excellence;',
    '</>',
    '<@Insects>',
    '   Ant;',
    '   Mosquito = 2;',
    '</>'
]);
